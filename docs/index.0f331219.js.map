{"mappings":"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","sources":["node_modules/cropo/script.ts","test.ts"],"sourcesContent":["var slider: HTMLInputElement | undefined;\n\n// canvas related variables\nvar canvas: HTMLCanvasElement;\nvar canvasContext: CanvasRenderingContext2D | null;\nvar canvasWidth: number = 0;\nvar canvasHeight: number = 0;\n\n// image related variables\nvar img: HTMLImageElement;\nvar imgHeight: number;\nvar imgWidth: number;\nvar scale: number;\nvar originalWidth: number;\nvar originalHeight: number;\nvar ratio: number;\n\n// Pointer drag related variables\nvar isDown: boolean;\nvar pointerX: number, pointerY: number;\n\n// the accumulated horizontal(X) & vertical(Y) panning the user has done in total\nvar netPanningX: number;\nvar netPanningY: number;\n\n// zoom and pinch related variables\nlet originX: number, originY: number;\nvar eventCache: PointerEvent[];\nvar prevDiff: number;\n\nfunction initPointerAndZoom() {\n  isDown = false;\n  netPanningX = 0;\n  netPanningY = 0;\n  eventCache = [];\n  prevDiff = -1;\n  if (slider) slider.value = '1'\n}\n\n// draw image\nfunction draw() {\n  canvasContext?.clearRect(0, 0, canvasWidth, canvasHeight);\n  canvasContext?.drawImage(img, netPanningX, netPanningY, imgWidth, imgHeight);\n}\n\n// recalculate images related variables\nfunction onImageLoad(fixScale: boolean = true) {\n  scale = Math.max(canvasHeight / imgHeight, canvasWidth / imgWidth);\n  imgHeight *= scale;\n  imgWidth *= scale;\n  originalWidth = imgWidth;\n  originalHeight = imgHeight;\n  ratio = originalHeight / originalWidth;\n  draw();\n}\n\n// define function to clamp number\nfunction clamp(num: number, from: number, to: number) {\n  return Math.max(from, Math.min(num, to));\n}\n\n// define debounce function\nfunction debounce<Params extends any[]>(func: (...args: Params) => any, timeout: number,): (...args: Params) => void {\n  let timer: NodeJS.Timeout\n  return (...args: Params) => {\n    clearTimeout(timer)\n    timer = setTimeout(() => {\n      func(...args)\n    }, timeout)\n  }\n}\n\n// get the median point of pointers\nfunction getPointerAverage() {\n  let x = 0, y = 0;\n  for (var i = 0; i < eventCache.length; i++) {\n    x += eventCache[i].offsetX;\n    y += eventCache[i].offsetY;\n  }\n  x = x / eventCache.length;\n  y = y / eventCache.length;\n  return [x, y]\n}\n\n// calc origin for zoom and pinch\nfunction calcOrigin(x: number, y: number) {\n  originX = (-netPanningX + x) / imgWidth;\n  originY = (-netPanningY + y) / imgHeight;\n}\n\nfunction handleMouseMove(x: number, y: number) {\n  // the last mousemove event\n  var dx = x - pointerX;\n  var dy = y - pointerY;\n  // reset the vars for next mousemove\n  pointerX = x;\n  pointerY = y;\n  // accumulate the net panning done\n  netPanningX = clamp(netPanningX + dx, canvasWidth - imgWidth, 0);\n  netPanningY = clamp(netPanningY + dy, canvasHeight - imgHeight, 0);\n}\n\nfunction zoom(deltaX: number, deltaY: number) {\n  netPanningX = clamp(netPanningX - deltaX * originX, canvasWidth - imgWidth, 0);\n  netPanningY = clamp(netPanningY - deltaY * originY, canvasHeight - imgHeight, 0);\n}\n\nfunction zoomDelta(deltaX: number, deltaY: number) {\n  const newWidth = imgWidth + deltaX;\n  if (newWidth < originalWidth || imgHeight + deltaY < originalHeight) return;\n  if (newWidth / originalWidth > 5) return;\n  if (slider) slider.value = String(scale = newWidth / originalWidth)\n  // calc new size\n  imgWidth = newWidth;\n  imgHeight += deltaY;\n  // accumulate the net panning done\n  zoom(deltaX, deltaY);\n}\n\nfunction zoomScale(scale: number) {\n  prevDiff = -1;\n  let deltaX = imgWidth;\n  let deltaY = imgHeight;\n  // calc new size\n  imgWidth = originalWidth * scale;\n  imgHeight = originalHeight * scale;\n  // calc diff\n  deltaX -= imgWidth;\n  deltaY -= imgHeight;\n  //\n  calcOrigin(canvasWidth / 2, canvasHeight / 2);\n  zoom(-deltaX, -deltaY)\n}\n\nfunction pinch() {\n  if (eventCache.length == 2) {\n    // Calculate the distance between the two pointers\n    var curDiff = Math.hypot(eventCache[0].offsetX - eventCache[1].offsetX, eventCache[0].offsetY - eventCache[1].offsetY);\n    // zoom into image\n    if (prevDiff > 0) {\n      const delta = curDiff - prevDiff;\n      zoomDelta(delta, delta * ratio)\n    }\n    prevDiff = curDiff;\n  }\n}\n\n/* -------------------------------------------------------------------------- */\n/*                               Event Handlers                               */\n/* -------------------------------------------------------------------------- */\n\nfunction onSliderMove(e: Event) {\n  const value = (e.target as HTMLInputElement).value;\n  scale = +value;\n  zoomScale(scale);\n  draw();\n};\n\nfunction onPointerdown(e: PointerEvent) {\n  // This event is cached to support 2-finger gestures\n  eventCache.push(e);\n  // refresh move origin\n  [pointerX, pointerY] = getPointerAverage();\n  isDown = true;\n};\n\nfunction onPointerUp(e: PointerEvent) {\n  // If the number of pointers down is less than two then reset diff tracker\n  eventCache = eventCache.filter(ev => ev.pointerId != e.pointerId)\n  if (eventCache.length < 2) {\n    prevDiff = -1;\n  }\n  [pointerX, pointerY] = getPointerAverage();\n  if (eventCache.length == 0) isDown = false;\n};\n\nfunction onPointermove(e: PointerEvent) {\n  // Find this event in the cache and update its record with this event\n  for (var i = 0; i < eventCache.length; i++)\n    if (e.pointerId == eventCache[i].pointerId) {\n      eventCache[i] = e; break;\n    }\n  // calc x,y and\n  let [x, y] = getPointerAverage();\n  if (isDown) handleMouseMove(x, y);\n  pinch();\n  calcOrigin(canvasWidth / 2, canvasHeight / 2);\n  draw();\n};\n\nconst onResize = debounce<[]>(() => {\n  const deltaX = canvas.offsetWidth - canvasWidth;\n  const deltaY = canvas.offsetHeight - canvasHeight;\n  canvasWidth = canvas.width = canvas.offsetWidth;\n  canvasHeight = canvas.height = canvas.offsetHeight;\n  if (imgWidth < canvasWidth) {\n    netPanningX = 0;\n    onImageLoad();\n  } else if (imgHeight < canvasHeight) {\n    netPanningY = 0;\n    onImageLoad();\n  } else {\n    netPanningX += deltaX / 2;\n    netPanningY += deltaY / 2;\n    originalWidth = canvasWidth;\n    originalHeight = canvasWidth * ratio;\n    draw();\n  }\n  slider.value = String(scale = Math.min(imgWidth / canvasWidth, imgWidth / canvasHeight) || 1);\n}, 300)\n\nfunction prevent(e: Event) {\n  e.preventDefault();\n  e.stopPropagation();\n}\n\nfunction leadListeners() {\n  canvas.addEventListener('pointerdown', (e) => { prevent(e); onPointerdown(e) });\n  canvas.addEventListener('pointermove', (e) => { prevent(e); onPointermove(e) });\n  canvas.addEventListener('pointerout', (e) => { prevent(e); onPointerUp(e) })\n  canvas.addEventListener('pointerup', (e) => { prevent(e); onPointerUp(e) })\n  canvas.addEventListener('pointercancel', (e) => { prevent(e); onPointerUp(e) })\n  canvas.addEventListener('pointerleave', (e) => { prevent(e); onPointerUp(e) })\n  new ResizeObserver(onResize).observe(canvas);\n}\n\n/* -------------------------------------------------------------------------- */\n/*                                   Loading                                  */\n/* -------------------------------------------------------------------------- */\n\nexport function loadSlider(el: HTMLInputElement) {\n  slider = el;\n  slider.value = String(img ? scale || 1 : 1);\n  slider.addEventListener('input', (e) => { prevent(e); onSliderMove(e) });\n}\n\nexport function loadCanvas(el: HTMLCanvasElement) {\n  canvas = el;\n  canvasContext = canvas.getContext(\"2d\");\n  canvasWidth = canvas.width = canvas.offsetWidth;\n  canvasHeight = canvas.height = canvas.offsetHeight;\n  leadListeners();\n}\n\nexport function loadImageFromUrl(url: string) {\n  img = new Image();\n  img.onload = () => {\n    initPointerAndZoom();\n    imgHeight = img.naturalHeight;\n    imgWidth = img.naturalWidth;\n    onImageLoad();\n  };\n  img.src = url;\n}\n","import { loadCanvas, loadImageFromUrl, loadSlider } from 'cropo';\r\n\r\nfunction prevent(e: Event) {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n}\r\n\r\nloadCanvas(document.getElementById('canvas') as HTMLCanvasElement);\r\nloadImageFromUrl('https://www.tailwind-kit.com/images/landscape/3.jpg');\r\nloadSlider(document.getElementById(\"myRange\") as HTMLInputElement);\r\nvar filePicker: HTMLInputElement = <HTMLInputElement>document.getElementById(\"filePicker\");\r\nfunction loadImageFile() {\r\n    var file = (filePicker as HTMLInputElement).files?.[0];\r\n    if (!file) return\r\n    var fr = new FileReader();\r\n    fr.onload = () => loadImageFromUrl(String(fr.result));\r\n    fr.readAsDataURL(file);\r\n}\r\nfilePicker.addEventListener('change', (e) => { prevent(e); loadImageFile() });\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                                    page                                    */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst dropdown = document.getElementById(\"dropdown\");\r\n\r\n\r\ndocument.getElementById(\"menu\").addEventListener('click', () => { \r\n    dropdown.classList.toggle('hidden');\r\n})"],"names":["slider","canvas","canvasContext","img","imgHeight","imgWidth","scale","originalWidth","originalHeight","ratio","isDown","pointerX","pointerY","netPanningX","netPanningY","originX","originY","eventCache","prevDiff","canvasWidth","canvasHeight","draw","clearRect","drawImage","onImageLoad","fixScale","Math","max","clamp","num","from","to","min","getPointerAverage","x","y","i","length","offsetX","offsetY","calcOrigin","zoom","deltaX","deltaY","onPointerUp","e","filter","ev","pointerId","n","func","timer","el","onResize","offsetWidth","offsetHeight","width","height","value","String","t","arguments","clearTimeout","setTimeout","prevent","preventDefault","stopPropagation","loadImageFromUrl","url","Image","onload","naturalHeight","naturalWidth","src","document","getElementById","getContext","addEventListener","push","dx","dy","curDiff","hypot","delta","newWidth","ResizeObserver","observe","$ddcc84e849eca42c$export$7dc0d71d95f22484","target","$7372b7044736ab82$var$filePicker","$7372b7044736ab82$var$prevent","file","files","fr","FileReader","result","readAsDataURL","$7372b7044736ab82$var$loadImageFile","$7372b7044736ab82$var$dropdown","classList","toggle"],"version":3,"file":"index.0f331219.js.map"}