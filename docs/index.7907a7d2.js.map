{"mappings":"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","sources":["node_modules/cropo/script.ts","test.ts"],"sourcesContent":["var slider: HTMLInputElement | undefined;\n\n// canvas related variables\nvar canvas: HTMLCanvasElement;\nvar canvasContext: CanvasRenderingContext2D | null;\nvar canvasWidth: number;\nvar canvasHeight: number;\n\n// image related variables\nvar img: HTMLImageElement;\nvar imgHeight: number;\nvar imgWidth: number;\nvar scale: number;\nvar originalWidth: number;\nvar originalHeight: number;\nvar ratio: number;\n\n// Pointer drag related variables\nvar isDown: boolean;\nvar pointerX: number, pointerY: number;\n\n// the accumulated horizontal(X) & vertical(Y) panning the user has done in total\nvar netPanningX: number;\nvar netPanningY: number;\n\n// zoom and pinch related variables\nlet originX: number, originY: number;\nvar eventCache: PointerEvent[];\nvar prevDiff: number;\n\nfunction initPointerAndZoom() {\n  isDown = false;\n  netPanningX = 0;\n  netPanningY = 0;\n  eventCache = [];\n  prevDiff = -1;\n  if (slider) slider.value = '1'\n}\n\n// draw image\nfunction draw() {\n  canvasContext?.clearRect(0, 0, canvasWidth, canvasHeight);\n  canvasContext?.drawImage(img, netPanningX, netPanningY, imgWidth, imgHeight);\n}\n\n// recalculate images related variables\nfunction onImageLoad() {\n  imgHeight = img.naturalHeight;\n  imgWidth = img.naturalWidth;\n\n  // fix image scale to contain\n  scale = Math.max(canvasHeight / imgHeight, canvasWidth / imgWidth);\n  imgHeight *= scale;\n  imgWidth *= scale;\n  originalWidth = imgWidth;\n  originalHeight = imgHeight;\n  ratio = originalHeight / originalWidth;\n  draw();\n}\n\n// define function to clamp number\nfunction clamp(num: number, from: number, to: number) {\n  return Math.max(from, Math.min(num, to));\n}\n\n// get the median point of pointers\nfunction getPointerAverage() {\n  let x = 0, y = 0;\n  for (var i = 0; i < eventCache.length; i++) {\n    x += eventCache[i].offsetX;\n    y += eventCache[i].offsetY;\n  }\n  x = x / eventCache.length;\n  y = y / eventCache.length;\n  return [x, y]\n}\n\n// calc origin for zoom and pinch\nfunction calcOrigin(x: number, y: number) {\n  originX = (-netPanningX + x) / imgWidth;\n  originY = (-netPanningY + y) / imgHeight;\n}\n\nfunction handleMouseMove(x: number, y: number) {\n  // the last mousemove event\n  var dx = x - pointerX;\n  var dy = y - pointerY;\n  // reset the vars for next mousemove\n  pointerX = x;\n  pointerY = y;\n  // accumulate the net panning done\n  netPanningX = clamp(netPanningX + dx, canvasWidth - imgWidth, 0);\n  netPanningY = clamp(netPanningY + dy, canvasHeight - imgHeight, 0);\n}\n\nfunction zoom(deltaX: number, deltaY: number) {\n  netPanningX = clamp(netPanningX - deltaX * originX, canvasWidth - imgWidth, 0);\n  netPanningY = clamp(netPanningY - deltaY * originY, canvasHeight - imgHeight, 0);\n}\n\nfunction zoomDelta(deltaX: number, deltaY: number) {\n  const newWidth = imgWidth + deltaX;\n  if (newWidth < originalWidth || imgHeight + deltaY < originalHeight) return;\n  if (newWidth / originalWidth > 5) return;\n  if (slider) slider.value = String(newWidth / originalWidth)\n  // calc new size\n  imgWidth = newWidth;\n  imgHeight += deltaY;\n  // accumulate the net panning done\n  zoom(deltaX, deltaY);\n}\n\nfunction zoomScale(scale: number) {\n  prevDiff = -1;\n  let deltaX = imgWidth;\n  let deltaY = imgHeight;\n  // calc new size\n  imgWidth = originalWidth * scale;\n  imgHeight = originalHeight * scale;\n  // calc diff\n  deltaX -= imgWidth;\n  deltaY -= imgHeight;\n  //\n  calcOrigin(canvasWidth / 2, canvasHeight / 2);\n  zoom(-deltaX, -deltaY)\n}\n\nfunction pinch() {\n  if (eventCache.length == 2) {\n    // Calculate the distance between the two pointers\n    var curDiff = Math.hypot(eventCache[0].offsetX - eventCache[1].offsetX, eventCache[0].offsetY - eventCache[1].offsetY);\n    // zoom into image\n    if (prevDiff > 0) {\n      const delta = curDiff - prevDiff;\n      zoomDelta(delta, delta * ratio)\n    }\n    prevDiff = curDiff;\n  }\n}\n\n/* -------------------------------------------------------------------------- */\n/*                               Event Handlers                               */\n/* -------------------------------------------------------------------------- */\n\nfunction onSliderMove(e: Event) {\n  const value = (e.target as HTMLInputElement).value;\n  zoomScale(+value);\n  draw();\n};\nfunction onPointerdown(e: PointerEvent) {\n  // This event is cached to support 2-finger gestures\n  eventCache.push(e);\n  // refresh move origin\n  [pointerX, pointerY] = getPointerAverage();\n  isDown = true;\n};\n\nfunction onPointerUp(e: PointerEvent) {\n  // If the number of pointers down is less than two then reset diff tracker\n  eventCache = eventCache.filter(ev => ev.pointerId != e.pointerId)\n  if (eventCache.length < 2) {\n    prevDiff = -1;\n  }\n  [pointerX, pointerY] = getPointerAverage();\n  if (eventCache.length == 0) isDown = false;\n};\n\nfunction onPointermove(e: PointerEvent) {\n  // Find this event in the cache and update its record with this event\n  for (var i = 0; i < eventCache.length; i++)\n    if (e.pointerId == eventCache[i].pointerId) {\n      eventCache[i] = e; break;\n    }\n  // calc x,y and\n  let [x, y] = getPointerAverage();\n  if (isDown) handleMouseMove(x, y);\n  pinch();\n  calcOrigin(canvasWidth / 2, canvasHeight / 2);\n  draw();\n};\n\nfunction prevent(e: Event) {\n  e.preventDefault();\n  e.stopPropagation();\n}\n\nfunction leadListeners() {\n  canvas.addEventListener('pointerdown', (e) => { prevent(e); onPointerdown(e) });\n  canvas.addEventListener('pointermove', (e) => { prevent(e); onPointermove(e) });\n  canvas.addEventListener('pointerout', (e) => { prevent(e); onPointerUp(e) })\n  canvas.addEventListener('pointerup', (e) => { prevent(e); onPointerUp(e) })\n  canvas.addEventListener('pointercancel', (e) => { prevent(e); onPointerUp(e) })\n  canvas.addEventListener('pointerleave', (e) => { prevent(e); onPointerUp(e) })\n}\n\n/* -------------------------------------------------------------------------- */\n/*                                   Loading                                  */\n/* -------------------------------------------------------------------------- */\n\nexport function loadSlider(el: HTMLInputElement) {\n  slider = el;\n  slider.value = String(imgWidth ? imgWidth / originalWidth : 1);\n  slider.addEventListener('input', (e) => { prevent(e); onSliderMove(e) });\n}\n\nexport function loadCanvas(el: HTMLCanvasElement) {\n  canvas = el;\n  canvasContext = canvas.getContext(\"2d\");\n  canvasWidth = el.width = canvas.offsetWidth;\n  canvasHeight = el.height = canvas.offsetHeight;\n  console.log(canvas.offsetHeight,canvas.height,canvas.clientHeight);\n  leadListeners();\n}\n\nexport function loadImageFromUrl(url: string) {\n  img = new Image();\n  img.onload = () => {\n    initPointerAndZoom();\n    onImageLoad();\n  };\n  img.src = url;\n}\n","import { loadCanvas, loadImageFromUrl, loadSlider } from 'cropo';\r\n\r\nfunction prevent(e: Event) {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n}\r\n\r\nloadCanvas(document.getElementById('canvas') as HTMLCanvasElement);\r\nloadImageFromUrl('https://www.tailwind-kit.com/images/landscape/3.jpg');\r\nloadSlider(document.getElementById(\"myRange\") as HTMLInputElement);\r\nvar filePicker: HTMLInputElement = <HTMLInputElement>document.getElementById(\"filePicker\");\r\nfunction loadImageFile() {\r\n    var file = (filePicker as HTMLInputElement).files?.[0];\r\n    if (!file) return\r\n    var fr = new FileReader();\r\n    fr.onload = () => loadImageFromUrl(String(fr.result));\r\n    fr.readAsDataURL(file);\r\n}\r\nfilePicker.addEventListener('change', (e) => { prevent(e); loadImageFile() });\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                                    page                                    */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst dropdown = document.getElementById(\"dropdown\");\r\n\r\n\r\ndocument.getElementById(\"menu\").addEventListener('click', () => { \r\n    dropdown.classList.toggle('hidden');\r\n})"],"names":["slider","canvas","canvasContext","canvasWidth","canvasHeight","img","imgHeight","imgWidth","scale","originalWidth","originalHeight","ratio","isDown","pointerX","pointerY","netPanningX","netPanningY","originX","originY","eventCache","prevDiff","el","draw","clearRect","drawImage","clamp","num","from","to","Math","max","min","getPointerAverage","x","y","i","length","offsetX","offsetY","calcOrigin","zoom","deltaX","deltaY","onPointerUp","e","filter","ev","pointerId","n","prevent","preventDefault","stopPropagation","loadImageFromUrl","url","Image","onload","value","naturalHeight","naturalWidth","src","document","getElementById","getContext","width","offsetWidth","height","offsetHeight","console","log","clientHeight","addEventListener","push","dx","dy","curDiff","hypot","delta","newWidth","String","$ddcc84e849eca42c$export$7dc0d71d95f22484","target","$7372b7044736ab82$var$filePicker","$7372b7044736ab82$var$prevent","file","files","fr","FileReader","result","readAsDataURL","$7372b7044736ab82$var$loadImageFile","$7372b7044736ab82$var$dropdown","classList","toggle"],"version":3,"file":"index.7907a7d2.js.map"}