{"mappings":"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","sources":["../script.ts","test.tsx"],"sourcesContent":["export class Cropo {\n  // zoom range input\n  private slider: HTMLInputElement | undefined;\n\n  // canvas related variables\n  private canvas: HTMLCanvasElement;\n  private canvasContext: CanvasRenderingContext2D;\n  private canvasWidth: number = 0;\n  private canvasHeight: number = 0;\n\n  // image related variables\n  private fit: boolean = true;\n  private img: HTMLImageElement;\n  private imgHeight: number;\n  private imgWidth: number;\n  private scale: number;\n  private baseScale: number = 1;\n  private maxScale: number = 5;\n  private minScale: number = 1;\n  private originalWidth: number;\n  private originalHeight: number;\n  private ratio: number;\n\n  // Pointer drag related variables\n  private isDown: boolean;\n  private pointerX: number\n  private pointerY: number;\n\n  // the accumulated horizontal(X) & vertical(Y) panning the user has done in total\n  private netPanningX: number;\n  private netPanningY: number;\n\n  // zoom and pinch related variables\n  private originX: number\n  private originY: number;\n  private eventCache: PointerEvent[];\n  private prevDiff: number;\n\n  // TODO: remove optional from version 1.0.0\n  constructor (options: {\n    imageUrl?: string;\n    onImageLoad?: () => void;\n    canvas?: HTMLCanvasElement,\n    rangeInput?: HTMLInputElement,\n    height?: number,\n    width?: number,\n    x?: number,\n    y?: number,\n    fit?: boolean,\n    baseScale?: number;\n    maxScale?: number;\n    minScale?: number;\n  }) {\n    this.baseScale = options?.baseScale || this.baseScale\n    this.maxScale = options?.maxScale || this.maxScale\n    this.minScale = options?.minScale || this.minScale\n    this.loadCanvas(options?.canvas || document.createElement('canvas'), options?.width, options?.height)\n    options?.rangeInput && this.loadSlider(options.rangeInput)\n    if (options?.imageUrl) {\n      this.loadImageFromUrl(options?.imageUrl, options?.fit, () => {\n        this.move(options?.x || 0, options?.y || 0)\n        options?.onImageLoad?.()\n      })\n    }\n  }\n\n  // define function to clamp number\n  private clamp (num: number, from: number, to: number) {\n    return Math.max(from, Math.min(num, to))\n  }\n\n  // define debounce function\n  private debounce<Params extends any[]> (func: (...args: Params) => any, timeout: number): (...args: Params) => void {\n    let timer\n    return (...args: Params) => {\n      clearTimeout(timer)\n      timer = setTimeout(() => {\n        func(...args)\n      }, timeout)\n    }\n  }\n\n  // initialize pointer related variables\n  private initPointerAndZoom () {\n    this.isDown = false\n    this.netPanningX = 0\n    this.netPanningY = 0\n    this.eventCache = []\n    this.prevDiff = -1\n    if (this.slider) this.slider.value = String(this.baseScale)\n  }\n\n  // draw image\n  private draw () {\n    if (!this.img) return\n    this.canvasContext?.clearRect(0, 0, this.canvasWidth, this.canvasHeight)\n    this.canvasContext?.drawImage(this.img, this.netPanningX, this.netPanningY, this.imgWidth, this.imgHeight)\n  }\n\n  // fix range\n  private fixScale () {\n    if (this.fit) { this.scale = Math.min(this.imgWidth / this.canvasWidth, this.imgWidth / this.canvasHeight) || this.baseScale } else { this.scale = Math.min(this.imgWidth / this.originalWidth, this.imgWidth / this.originalHeight) || this.baseScale }\n    if (this.slider) this.slider.value = String(this.scale)\n  }\n\n  // recalculate images related variables\n  private onImageLoad () {\n    if (this.fit) {\n      this.scale = Math.max(this.canvasHeight / this.imgHeight, this.canvasWidth / this.imgWidth)\n      this.imgHeight *= this.scale\n      this.imgWidth *= this.scale\n    }\n    this.pointerX = this.pointerY = 0\n    this.originalWidth = this.imgWidth\n    this.originalHeight = this.imgHeight\n    this.ratio = this.originalHeight / this.originalWidth\n    this.draw()\n  }\n\n  // get the median point of pointers\n  private getPointerAverage () {\n    let x = 0; let y = 0\n    for (let i = 0; i < this.eventCache.length; i++) {\n      x += this.eventCache[i].offsetX\n      y += this.eventCache[i].offsetY\n    }\n    x = x / this.eventCache.length\n    y = y / this.eventCache.length\n    return [x, y]\n  }\n\n  // calc origin for zoom and pinch\n  private calcOrigin (x: number, y: number) {\n    this.originX = (-this.netPanningX + x) / this.imgWidth\n    this.originY = (-this.netPanningY + y) / this.imgHeight\n  }\n\n  public move (x: number, y: number) {\n    // the last mousemove event\n    const dx = x - this.pointerX\n    const dy = y - this.pointerY\n    // reset the vars for next mousemove\n    this.pointerX = x\n    this.pointerY = y\n    // accumulate the net panning done\n    this.netPanningX = this.fit ? this.clamp(this.netPanningX + dx, this.canvasWidth - this.imgWidth, 0) : this.netPanningX + dx\n    this.netPanningY = this.fit ? this.clamp(this.netPanningY + dy, this.canvasHeight - this.imgHeight, 0) : this.netPanningY + dy\n  }\n\n  private drawZoom (deltaX: number, deltaY: number) {\n    this.netPanningX = this.fit ? this.clamp(this.netPanningX - deltaX * this.originX, this.canvasWidth - this.imgWidth, 0) : this.netPanningX - deltaX * this.originX\n    this.netPanningY = this.fit ? this.clamp(this.netPanningY - deltaY * this.originY, this.canvasHeight - this.imgHeight, 0) : this.netPanningY - deltaY * this.originY\n  }\n\n  private zoomDelta (deltaX: number, deltaY: number) {\n    const newWidth = this.imgWidth + deltaX\n    if (newWidth < this.originalWidth || this.imgHeight + deltaY < this.originalHeight) return\n    if (newWidth / this.originalWidth > this.maxScale || newWidth / this.originalWidth < this.minScale) return\n    if (this.slider) this.slider.value = String(this.scale = newWidth / this.originalWidth)\n    // calc new size\n    this.imgWidth = newWidth\n    this.imgHeight += deltaY\n    // accumulate the net panning done\n    this.drawZoom(deltaX, deltaY)\n  }\n\n  private zoomScale (scale: number) {\n    if (scale > this.maxScale || scale < this.minScale) return\n    this.prevDiff = -1\n    let deltaX = this.imgWidth\n    let deltaY = this.imgHeight\n    // calc new size\n    this.imgWidth = this.originalWidth * scale\n    this.imgHeight = this.originalHeight * scale\n    // calc diff\n    deltaX -= this.imgWidth\n    deltaY -= this.imgHeight\n    //\n    this.calcOrigin(this.canvasWidth / 2, this.canvasHeight / 2)\n    this.drawZoom(-deltaX, -deltaY)\n  }\n\n  private pinch () {\n    if (this.eventCache.length === 2) {\n      // Calculate the distance between the two pointers\n      const curDiff = Math.hypot(this.eventCache[0].offsetX - this.eventCache[1].offsetX, this.eventCache[0].offsetY - this.eventCache[1].offsetY)\n      // zoom into image\n      if (this.prevDiff > 0) {\n        const delta = curDiff - this.prevDiff\n        this.zoomDelta(delta, delta * this.ratio)\n      }\n      this.prevDiff = curDiff\n    }\n  }\n\n  /* -------------------------------------------------------------------------- */\n  /*                               Event Handlers                               */\n  /* -------------------------------------------------------------------------- */\n\n  private onSliderMove (e: Event) {\n    const value = (e.target as HTMLInputElement).value\n    this.scale = +value\n    this.zoomScale(this.scale)\n    this.draw()\n  };\n\n  private onPointerdown (e: PointerEvent) {\n    if (!this.img) return\n    // This event is cached to support 2-finger gestures\n    this.eventCache.push(e);\n    // refresh move origin\n    [this.pointerX, this.pointerY] = this.getPointerAverage()\n    this.isDown = true\n  };\n\n  private onPointerUp (e: PointerEvent) {\n    if (!this.isDown) return\n    // If the number of pointers down is less than two then reset diff tracker\n    this.eventCache = this.eventCache.filter(ev => ev.pointerId !== e.pointerId)\n    if (this.eventCache.length < 2) {\n      this.prevDiff = -1\n    }\n    [this.pointerX, this.pointerY] = this.getPointerAverage()\n    if (this.eventCache.length === 0) this.isDown = false\n  };\n\n  private onPointermove (e: PointerEvent) {\n    if (!this.isDown) return\n    // Find this event in the cache and update its record with this event\n    for (let i = 0; i < this.eventCache.length; i++) {\n      if (e.pointerId === this.eventCache[i].pointerId) {\n        this.eventCache[i] = e; break\n      }\n    }\n    // calc x,y and\n    const [x, y] = this.getPointerAverage()\n    this.move(x, y)\n    this.pinch()\n    this.calcOrigin(this.canvasWidth / 2, this.canvasHeight / 2)\n    this.draw()\n  };\n\n  private onResize = this.debounce<[]>(() => {\n    if (!this.img) return\n    const deltaX = this.canvas.offsetWidth - this.canvasWidth\n    const deltaY = this.canvas.offsetHeight - this.canvasHeight\n    this.canvasWidth = this.canvas.width = this.canvas.offsetWidth\n    this.canvasHeight = this.canvas.height = this.canvas.offsetHeight\n    if (this.fit && this.imgWidth < this.canvasWidth) {\n      this.netPanningX = 0\n      this.onImageLoad()\n    } else if (this.fit && this.imgHeight < this.canvasHeight) {\n      this.netPanningY = 0\n      this.onImageLoad()\n    } else {\n      this.netPanningX += deltaX / 2\n      this.netPanningY += deltaY / 2\n      this.originalWidth = this.canvasWidth\n      this.originalHeight = this.canvasWidth * this.ratio\n      this.draw()\n    }\n    this.fixScale()\n  }, 300)\n\n  private prevent (e: Event) {\n    e.preventDefault()\n    e.stopPropagation()\n  }\n\n  private leadListeners () {\n    this.canvas.addEventListener('pointerdown', (e) => { this.prevent(e); this.onPointerdown(e) })\n    this.canvas.addEventListener('pointermove', (e) => { this.prevent(e); this.onPointermove(e) })\n    this.canvas.addEventListener('pointerout', (e) => { this.prevent(e); this.onPointerUp(e) })\n    this.canvas.addEventListener('pointerup', (e) => { this.prevent(e); this.onPointerUp(e) })\n    this.canvas.addEventListener('pointercancel', (e) => { this.prevent(e); this.onPointerUp(e) })\n    this.canvas.addEventListener('pointerleave', (e) => { this.prevent(e); this.onPointerUp(e) })\n    new ResizeObserver(this.onResize).observe(this.canvas)\n  }\n\n  /* -------------------------------------------------------------------------- */\n  /*                                   Loading                                  */\n  /* -------------------------------------------------------------------------- */\n\n  public loadSlider (el: HTMLInputElement) {\n    this.slider = el\n    this.slider.value = String(this.scale || this.baseScale)\n    this.slider.addEventListener('input', (e) => { this.prevent(e); this.onSliderMove(e) })\n  }\n\n  public loadCanvas (el: HTMLCanvasElement, width?: number, height?: number) {\n    this.canvas = el\n    this.canvasContext = this.canvas.getContext('2d')\n    this.canvasWidth = this.canvas.width = width || this.canvas.offsetWidth\n    this.canvasHeight = this.canvas.height = height || this.canvas.offsetHeight\n    this.leadListeners()\n  }\n\n  public loadImageFromUrl (url: string, fitImage: boolean = true, onload?: () => void) {\n    if (!this.canvas) throw Error('first call loadCanvas')\n    this.fit = fitImage\n    this.img = new Image()\n    this.img.onload = () => {\n      this.initPointerAndZoom()\n      this.imgHeight = this.img.naturalHeight\n      this.imgWidth = this.img.naturalWidth\n      this.onImageLoad()\n      onload?.()\n    }\n    this.img.src = url\n  }\n\n  /* -------------------------------------------------------------------------- */\n  /*                                   Export                                   */\n  /* -------------------------------------------------------------------------- */\n\n  public getDataUrl (scale: number = 1) {\n    if (!this.img) throw Error('please set an image')\n    const canvas = document.createElement('canvas')\n    canvas.width = this.canvasWidth * scale\n    canvas.height = this.canvasHeight * scale\n    const context = canvas.getContext('2d')\n    context.drawImage(this.img, this.netPanningX * scale, this.netPanningY * scale, this.imgWidth * scale, this.imgHeight * scale)\n    return canvas.toDataURL()\n  }\n\n  public download (scale: number = 1) {\n    const link = document.createElement('a')\n    link.download = 'canvas.png'\n    link.href = this.getDataUrl(scale)\n    link.click()\n  }\n\n  public getCropInfo () {\n    return ({\n      width: this.imgWidth,\n      imgHeight: this.imgHeight,\n      x: this.netPanningX,\n      y: this.netPanningY\n    })\n  }\n}\n\nconst cr = new Cropo({})\n\n/**\n * @deprecated Since version 0.6. Will be deleted in version 1.0. Use Cropo instance instead. (example: cont cr= new Cropo(config); cr.download();)\n */\nexport function download (...arg: Parameters<typeof cr.download>) { cr.download(...arg) };\n/**\n * @deprecated Since version 0.6. Will be deleted in version 1.0. Use Cropo instance instead. (example: new Cropo(config))\n */\nexport function loadCanvas (...arg: Parameters<typeof cr.loadCanvas>) { cr.loadCanvas(...arg) };\n/**\n * @deprecated Since version 0.6. Will be deleted in version 1.0. Use Cropo instance instead. (example: cont cr= new Cropo(config); cr.loadImageFromUrl();)\n */\nexport function loadImageFromUrl (...arg: Parameters<typeof cr.loadImageFromUrl>) { cr.loadImageFromUrl(...arg) };\n/**\n * @deprecated Since version 0.6. Will be deleted in version 1.0. Use Cropo instance instead. (example: new Cropo(config))\n */\nexport function loadSlider (...arg: Parameters<typeof cr.loadSlider>) { cr.loadSlider(...arg) };\n/**\n * @deprecated Since version 0.6. Will be deleted in version 1.0. Use Cropo instance instead. (example: cont cr= new Cropo(config); cr.move();)\n */\nexport function move (...arg: Parameters<typeof cr.move>) { cr.move(...arg) };\n/**\n * @deprecated Since version 0.6. Will be deleted in version 1.0. Use Cropo instance instead.(example: cont cr= new Cropo(config); cr.getCropInfo();)\n */\nexport function getCropInfo (...arg: Parameters<typeof cr.getCropInfo>) { cr.getCropInfo(...arg) };\n/**\n * @deprecated Since version 0.6. Will be deleted in version 1.0. Use Cropo instance instead. (example: cont cr= new Cropo(config); cr.getDataUrl();)\n */\nexport function getDataUrl (...arg: Parameters<typeof cr.getDataUrl>) { cr.getDataUrl(...arg) };\n","import image from './pine.webp'\r\nimport { Cropo } from '../script'\r\n\r\nconst cr = new Cropo({\r\n  // imageUrl: image,\r\n  canvas: document.getElementById('canvas') as HTMLCanvasElement,\r\n  rangeInput: document.getElementById('myRange') as HTMLInputElement\r\n})\r\n\r\n//\r\nconst filePicker: HTMLInputElement = document.getElementById('filePicker') as HTMLInputElement\r\n\r\nfilePicker.addEventListener('change', (e) => {\r\n  const file = (filePicker as HTMLInputElement).files?.[0]\r\n  if (!file) return\r\n  const fr = new FileReader()\r\n  fr.onload = () => cr.loadImageFromUrl(String(fr.result))\r\n  fr.readAsDataURL(file)\r\n})\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                                    page                                    */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst dropdown = document.getElementById('dropdown')\r\n\r\ndocument.getElementById('menu').addEventListener('click', () => {\r\n  dropdown.classList.toggle('hidden')\r\n})\r\n\r\ndocument.getElementById('download').addEventListener('click', () => {\r\n  cr.download()\r\n})\r\n"],"names":["$dd535ca4f161956d$export$f43653f9482b7473","options","this","canvasWidth","canvasHeight","fit","baseScale","maxScale","minScale","onResize","debounce","img","deltaX","canvas","offsetWidth","deltaY","offsetHeight","width","height","imgWidth","netPanningX","onImageLoad","imgHeight","netPanningY","originalWidth","originalHeight","ratio","draw","fixScale","loadCanvas","document","createElement","rangeInput","loadSlider","imageUrl","loadImageFromUrl","move","x","y","clamp","num","from","to","Math","max","min","func","timeout","timer","args","clearTimeout","setTimeout","initPointerAndZoom","isDown","eventCache","prevDiff","slider","value","String","canvasContext","clearRect","drawImage","scale","pointerX","pointerY","getPointerAverage","i","length","offsetX","offsetY","calcOrigin","originX","originY","dx","dy","drawZoom","zoomDelta","newWidth","zoomScale","pinch","curDiff","hypot","delta","onSliderMove","e","target","onPointerdown","push","onPointerUp","filter","ev","pointerId","onPointermove","prevent","preventDefault","stopPropagation","leadListeners","addEventListener","ResizeObserver","observe","el","getContext","url","fitImage","onload","Error","Image","naturalHeight","naturalWidth","src","getDataUrl","toDataURL","download","link","href","click","getCropInfo","$d06d36ffd4d05eea$var$cr","getElementById","$d06d36ffd4d05eea$var$filePicker","file","files","fr","FileReader","result","readAsDataURL","$d06d36ffd4d05eea$var$dropdown","classList","toggle"],"version":3,"file":"index.4ddb51d3.js.map"}