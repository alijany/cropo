{"mappings":"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","sources":["script.ts","test.ts"],"sourcesContent":["var slider: HTMLInputElement | undefined;\n\n// canvas related variables\nvar canvas: HTMLCanvasElement;\nvar canvasContext: CanvasRenderingContext2D | null;\nvar canvasWidth: number = 0;\nvar canvasHeight: number = 0;\n\n// image related variables\nvar img: HTMLImageElement;\nvar imgHeight: number;\nvar imgWidth: number;\nvar scale: number;\nvar originalWidth: number;\nvar originalHeight: number;\nvar ratio: number;\n\n// Pointer drag related variables\nvar isDown: boolean;\nvar pointerX: number, pointerY: number;\n\n// the accumulated horizontal(X) & vertical(Y) panning the user has done in total\nvar netPanningX: number;\nvar netPanningY: number;\n\n// zoom and pinch related variables\nlet originX: number, originY: number;\nvar eventCache: PointerEvent[];\nvar prevDiff: number;\n\nfunction initPointerAndZoom() {\n  isDown = false;\n  netPanningX = 0;\n  netPanningY = 0;\n  eventCache = [];\n  prevDiff = -1;\n  if (slider) slider.value = '1'\n}\n\n// draw image\nfunction draw() {\n  canvasContext?.clearRect(0, 0, canvasWidth, canvasHeight);\n  canvasContext?.drawImage(img, netPanningX, netPanningY, imgWidth, imgHeight);\n}\n\n// recalculate images related variables\nfunction onImageLoad(fixScale: boolean = true) {\n  scale = Math.max(canvasHeight / imgHeight, canvasWidth / imgWidth);\n  imgHeight *= scale;\n  imgWidth *= scale;\n  originalWidth = imgWidth;\n  originalHeight = imgHeight;\n  ratio = originalHeight / originalWidth;\n  draw();\n}\n\n// define function to clamp number\nfunction clamp(num: number, from: number, to: number) {\n  return Math.max(from, Math.min(num, to));\n}\n\n// define debounce function\nfunction debounce<Params extends any[]>(func: (...args: Params) => any, timeout: number,): (...args: Params) => void {\n  let timer: NodeJS.Timeout\n  return (...args: Params) => {\n    clearTimeout(timer)\n    timer = setTimeout(() => {\n      func(...args)\n    }, timeout)\n  }\n}\n\n// get the median point of pointers\nfunction getPointerAverage() {\n  let x = 0, y = 0;\n  for (var i = 0; i < eventCache.length; i++) {\n    x += eventCache[i].offsetX;\n    y += eventCache[i].offsetY;\n  }\n  x = x / eventCache.length;\n  y = y / eventCache.length;\n  return [x, y]\n}\n\n// calc origin for zoom and pinch\nfunction calcOrigin(x: number, y: number) {\n  originX = (-netPanningX + x) / imgWidth;\n  originY = (-netPanningY + y) / imgHeight;\n}\n\nfunction handleMouseMove(x: number, y: number) {\n  // the last mousemove event\n  var dx = x - pointerX;\n  var dy = y - pointerY;\n  // reset the vars for next mousemove\n  pointerX = x;\n  pointerY = y;\n  // accumulate the net panning done\n  netPanningX = clamp(netPanningX + dx, canvasWidth - imgWidth, 0);\n  netPanningY = clamp(netPanningY + dy, canvasHeight - imgHeight, 0);\n}\n\nfunction zoom(deltaX: number, deltaY: number) {\n  netPanningX = clamp(netPanningX - deltaX * originX, canvasWidth - imgWidth, 0);\n  netPanningY = clamp(netPanningY - deltaY * originY, canvasHeight - imgHeight, 0);\n}\n\nfunction zoomDelta(deltaX: number, deltaY: number) {\n  const newWidth = imgWidth + deltaX;\n  if (newWidth < originalWidth || imgHeight + deltaY < originalHeight) return;\n  if (newWidth / originalWidth > 5) return;\n  if (slider) slider.value = String(scale = newWidth / originalWidth)\n  // calc new size\n  imgWidth = newWidth;\n  imgHeight += deltaY;\n  // accumulate the net panning done\n  zoom(deltaX, deltaY);\n}\n\nfunction zoomScale(scale: number) {\n  prevDiff = -1;\n  let deltaX = imgWidth;\n  let deltaY = imgHeight;\n  // calc new size\n  imgWidth = originalWidth * scale;\n  imgHeight = originalHeight * scale;\n  // calc diff\n  deltaX -= imgWidth;\n  deltaY -= imgHeight;\n  //\n  calcOrigin(canvasWidth / 2, canvasHeight / 2);\n  zoom(-deltaX, -deltaY)\n}\n\nfunction pinch() {\n  if (eventCache.length == 2) {\n    // Calculate the distance between the two pointers\n    var curDiff = Math.hypot(eventCache[0].offsetX - eventCache[1].offsetX, eventCache[0].offsetY - eventCache[1].offsetY);\n    // zoom into image\n    if (prevDiff > 0) {\n      const delta = curDiff - prevDiff;\n      zoomDelta(delta, delta * ratio)\n    }\n    prevDiff = curDiff;\n  }\n}\n\n/* -------------------------------------------------------------------------- */\n/*                               Event Handlers                               */\n/* -------------------------------------------------------------------------- */\n\nfunction onSliderMove(e: Event) {\n  const value = (e.target as HTMLInputElement).value;\n  scale = +value;\n  zoomScale(scale);\n  draw();\n};\n\nfunction onPointerdown(e: PointerEvent) {\n  // This event is cached to support 2-finger gestures\n  eventCache.push(e);\n  // refresh move origin\n  [pointerX, pointerY] = getPointerAverage();\n  isDown = true;\n};\n\nfunction onPointerUp(e: PointerEvent) {\n  // If the number of pointers down is less than two then reset diff tracker\n  eventCache = eventCache.filter(ev => ev.pointerId != e.pointerId)\n  if (eventCache.length < 2) {\n    prevDiff = -1;\n  }\n  [pointerX, pointerY] = getPointerAverage();\n  if (eventCache.length == 0) isDown = false;\n};\n\nfunction onPointermove(e: PointerEvent) {\n  // Find this event in the cache and update its record with this event\n  for (var i = 0; i < eventCache.length; i++)\n    if (e.pointerId == eventCache[i].pointerId) {\n      eventCache[i] = e; break;\n    }\n  // calc x,y and\n  let [x, y] = getPointerAverage();\n  if (isDown) handleMouseMove(x, y);\n  pinch();\n  calcOrigin(canvasWidth / 2, canvasHeight / 2);\n  draw();\n};\n\nconst onResize = debounce<[]>(() => {\n  const deltaX = canvas.offsetWidth - canvasWidth;\n  const deltaY = canvas.offsetHeight - canvasHeight;\n  canvasWidth = canvas.width = canvas.offsetWidth;\n  canvasHeight = canvas.height = canvas.offsetHeight;\n  if (imgWidth < canvasWidth) {\n    netPanningX = 0;\n    onImageLoad();\n  } else if (imgHeight < canvasHeight) {\n    netPanningY = 0;\n    onImageLoad();\n  } else {\n    netPanningX += deltaX / 2;\n    netPanningY += deltaY / 2;\n    originalWidth = canvasWidth;\n    originalHeight = canvasWidth * ratio;\n    draw();\n  }\n  slider.value = String(scale = Math.min(imgWidth / canvasWidth, imgWidth / canvasHeight) || 1);\n}, 300)\n\nfunction prevent(e: Event) {\n  e.preventDefault();\n  e.stopPropagation();\n}\n\nfunction leadListeners() {\n  canvas.addEventListener('pointerdown', (e) => { prevent(e); onPointerdown(e) });\n  canvas.addEventListener('pointermove', (e) => { prevent(e); onPointermove(e) });\n  canvas.addEventListener('pointerout', (e) => { prevent(e); onPointerUp(e) })\n  canvas.addEventListener('pointerup', (e) => { prevent(e); onPointerUp(e) })\n  canvas.addEventListener('pointercancel', (e) => { prevent(e); onPointerUp(e) })\n  canvas.addEventListener('pointerleave', (e) => { prevent(e); onPointerUp(e) })\n  new ResizeObserver(onResize).observe(canvas);\n}\n\n/* -------------------------------------------------------------------------- */\n/*                                   Loading                                  */\n/* -------------------------------------------------------------------------- */\n\nexport function loadSlider(el: HTMLInputElement) {\n  slider = el;\n  slider.value = String(img ? scale || 1 : 1);\n  slider.addEventListener('input', (e) => { prevent(e); onSliderMove(e) });\n}\n\nexport function loadCanvas(el: HTMLCanvasElement) {\n  canvas = el;\n  canvasContext = canvas.getContext(\"2d\");\n  canvasWidth = canvas.width = canvas.offsetWidth;\n  canvasHeight = canvas.height = canvas.offsetHeight;\n  leadListeners();\n}\n\nexport function loadImageFromUrl(url: string) {\n  img = new Image();\n  img.onload = () => {\n    initPointerAndZoom();\n    imgHeight = img.naturalHeight;\n    imgWidth = img.naturalWidth;\n    onImageLoad();\n  };\n  img.src = url;\n}\n\n/* -------------------------------------------------------------------------- */\n/*                                   Export                                   */\n/* -------------------------------------------------------------------------- */\n\nexport function getBlob() {\n  return new Promise<Blob>((res, reg) => {\n    canvas.toBlob((b) => {\n      res(b);\n    })\n  })\n}\n\nexport function getDataUrl() {\n  return canvas.toDataURL(\"image/png\");\n}\n\nexport function download() {\n  const link = document.createElement('a');\n  link.download = 'canvas.png';\n  link.href = getDataUrl();\n  link.click();\n}","import { loadCanvas, loadImageFromUrl, loadSlider, download } from './script';\r\n\r\nfunction prevent(e: Event) {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n}\r\n\r\nloadCanvas(document.getElementById('canvas') as HTMLCanvasElement);\r\nloadImageFromUrl('https://www.tailwind-kit.com/images/landscape/3.jpg');\r\nloadSlider(document.getElementById(\"myRange\") as HTMLInputElement);\r\nvar filePicker: HTMLInputElement = <HTMLInputElement>document.getElementById(\"filePicker\");\r\nfunction loadImageFile() {\r\n    var file = (filePicker as HTMLInputElement).files?.[0];\r\n    if (!file) return\r\n    var fr = new FileReader();\r\n    fr.onload = () => loadImageFromUrl(String(fr.result));\r\n    fr.readAsDataURL(file);\r\n}\r\nfilePicker.addEventListener('change', (e) => { prevent(e); loadImageFile() });\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                                    page                                    */\r\n/* -------------------------------------------------------------------------- */\r\n\r\nconst dropdown = document.getElementById(\"dropdown\");\r\n\r\n\r\ndocument.getElementById(\"menu\").addEventListener('click', () => {\r\n    dropdown.classList.toggle('hidden');\r\n});\r\n\r\n\r\nsetTimeout(() => {\r\n    (<any>window).download = download;\r\n}, 2000)"],"names":["$c924f4e3264d454c$var$slider","$c924f4e3264d454c$var$canvas","$c924f4e3264d454c$var$canvasContext","$c924f4e3264d454c$var$img","$c924f4e3264d454c$var$imgHeight","$c924f4e3264d454c$var$imgWidth","$c924f4e3264d454c$var$scale","$c924f4e3264d454c$var$originalWidth","$c924f4e3264d454c$var$originalHeight","$c924f4e3264d454c$var$ratio","$c924f4e3264d454c$var$isDown","$c924f4e3264d454c$var$pointerX","$c924f4e3264d454c$var$pointerY","$c924f4e3264d454c$var$netPanningX","$c924f4e3264d454c$var$netPanningY","$c924f4e3264d454c$var$canvasWidth","$c924f4e3264d454c$var$canvasHeight","$c924f4e3264d454c$var$originX","$c924f4e3264d454c$var$originY","$c924f4e3264d454c$var$eventCache","$c924f4e3264d454c$var$prevDiff","$c924f4e3264d454c$var$draw","clearRect","drawImage","$c924f4e3264d454c$var$onImageLoad","fixScale","Math","max","$c924f4e3264d454c$var$clamp","num","from","to","min","$c924f4e3264d454c$var$getPointerAverage","x","y","i","length","offsetX","offsetY","$c924f4e3264d454c$var$calcOrigin","$c924f4e3264d454c$var$zoom","deltaX","deltaY","$c924f4e3264d454c$var$pinch","curDiff","hypot","delta","newWidth","value","String","$c924f4e3264d454c$var$zoomDelta","$c924f4e3264d454c$var$onSliderMove","e","target","scale","$c924f4e3264d454c$var$zoomScale","$c924f4e3264d454c$var$onPointerUp","filter","ev","pointerId","$c924f4e3264d454c$var$onPointermove","dx","dy","$c924f4e3264d454c$var$handleMouseMove","$c924f4e3264d454c$var$onResize","func","timeout","timer","args","clearTimeout","setTimeout","$c924f4e3264d454c$var$debounce","offsetWidth","offsetHeight","width","height","$c924f4e3264d454c$var$prevent","preventDefault","stopPropagation","$c924f4e3264d454c$var$leadListeners","addEventListener","push","$c924f4e3264d454c$var$onPointerdown","ResizeObserver","observe","$c924f4e3264d454c$export$7dc0d71d95f22484","url","Image","onload","naturalHeight","naturalWidth","src","$c924f4e3264d454c$export$24422be91ad4011f","link","document","createElement","download","href","toDataURL","click","el","getElementById","getContext","$c924f4e3264d454c$export$eddf944f3870013a","$7372b7044736ab82$var$filePicker","$7372b7044736ab82$var$prevent","file","files","fr","FileReader","result","readAsDataURL","$7372b7044736ab82$var$loadImageFile","$7372b7044736ab82$var$dropdown","classList","toggle","window"],"version":3,"file":"index.9961a13d.js.map"}